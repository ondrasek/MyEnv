"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
""
"" Ondruv megazazracnysuperhyperultrasuprafreecoolinkonfigurag 
""
"" Copyright (c) Ondra
""
"" Tento konfigurak byl zplagiatorovan Gaussem
""
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

language messages en_US
set ignorecase
set nocompatible
set nobackup
set writebackup
set autoread
set autowrite
set incsearch
set history=50
set backspace=indent,eol,start
set noexpandtab
set shiftwidth=4
set tabstop=4
set textwidth=0
set display=lastline
set nowrap
set showmatch
set showmode
set ruler
set helplang=en
set langmenu=en
set guifont=Ubuntu\ Mono:h18
"" autoselect, add tab pages, gray menu items, use vim icon, menu bar is
"" present, tear-off menu items, include toolar, right hand scrollbar
set guioptions=aegimtTR
set window=45
set number
set numberwidth=5
set scrolloff=3  

"" Color Settings
set background=dark
colorscheme darkblue

"" Highliting
syntax on
set hlsearch
hi LineNr guifg=LightGreen

"" Keyboard and Mouse
set mousemodel=popup
set keymodel=startsel,stopsel
set selection=exclusive
set selectmode=mouse,key
set whichwrap=b,s,<,>,[,]

"" Encodings
set encoding=utf8
"" set fileencodings=ucs-bom,utf8,latin2,cp1250,default,latin1

"" Status Line
function StatusLine_GetBasicFileInfo()
	let basicInfo = []

	"" Retrieve File Format
	let localInfo = ""
	if &fileformat == ""
		let localInfo = "?"
	else
		let localInfo = &fileformat
	endif
	let basicInfo = add (basicInfo, "f." . localInfo)

	"" Retrieve File Type
	let localInfo = ""
	if &filetype == ""
		let localInfo = "?"
	else
		let localInfo = &filetype
	endif
	let basicInfo = add(basicInfo, "t." . localInfo)

	"" Retrieve File Permissions
	if exists("b:currentFileName")
		let statText = substitute(system("stat -f \"%Su:%Sg/%Op\" " . b:currentFileName), "\n", "", "g")
		let basicInfo = add(basicInfo, statText)
	endif

	"" Retrieve File Encoding
	if &fileencoding != ""
		if &encoding != ""
			if (&fileencoding != &encoding)
				let basicInfo = add(basicInfo, "file=" . &fileencoding)
				let basicInfo = add(basicInfo, "enc=" . &encoding)
			else
				let basicInfo = add(basicInfo, &encoding)
			endif
		else
				let basicInfo = add(basicInfo, &fileencoding)
		endif
	else
		if &encoding != ""
			let basicInfo = add(basicInfo, &encoding)
		else
			let basicInfo = add(basicInfo, "enc?")
		endif
	endif
			
	return "[" . join(basicInfo, "|") . "]"
endfunction

function StatusLine_GetBufferFlags()
	let bufferFlags = []

	"" Buffer Type
	if &buftype
		let bufferFlags = add(bufferFlags, &buftype)
	endif

	"" Retrieve modified flag.
	if &modified
		let bufferFlags = add(bufferFlags, "modified")
		
		"" Check last saved time.
		if exists("b:lastSavedTime")
			if b:lastSavedTime == 0
				let bufferFlags = add(bufferFlags, "%3*unsaved%2*")
			else
				let age = localtime() - b:lastSavedTime
				if age > 180
					let bufferFlags = add(bufferFlags, "%3*unsaved%2*")
				endif
			endif
		endif
	endif

	if ! &modifiable 
		let bufferFlags = add(bufferFlags, "RO")
	endif

	let bufferFlagsStr = join(bufferFlags, ":")
	if strlen(bufferFlagsStr) > 0
		let bufferFlagsStr = "|" . bufferFlagsStr . "| "
	endif

	return bufferFlagsStr
endfunction

function StatusLine_GetFileSize()
	"" Instead of b:currentFileName we may simply put expand() here.
	if exists("b:currentFileName")
		let fileSize = getfsize(b:currentFileName)
		let unit = "b"
		
		if fileSize < 0
			let fileSize = 0
		endif

		if fileSize > 1024
			let fileSize = fileSize / 1024
			let unit = "KiB"
		endif

		if fileSize > 1024
			let fileSize = fileSize / 1024
			let unit = "MiB"
		endif		

		return "," . string(fileSize) . unit
	else
		return ""
	endif
endfunction

function StatusLine_GetModifiedTime()
	if exists("b:currentFileName")
		let modifiedTimeStr = strftime("%b %d %Y %X", getftime(b:currentFileName))

		return "|" . modifiedTimeStr . "|" 
	else
		return ""
	endif
endfunction

"" Set the current file name of a file opened in the current buffer.
"" let b:currentFileName = ""
"" let b:lastSavedTime = 0
autocmd BufNew,BufRead,BufCreate,BufFilePost * let b:currentFileName = expand("%:p") 
autocmd BufWritePost * let b:lastSavedTime = localtime() 
autocmd BufRead * let b:lastSavedTime = localtime()

"" Groups User2..4 are used for status line elements coloring.
hi User2 guifg=LightGray guibg=DarkGray
hi User3 guifg=DarkRed guibg=DarkGray
hi User4 guifg=Yellow guibg=#000040

"" GetStatusLine
function GetStatusLine()
	 let statusLine = "%4* buf %n:%2*%<%f%3*%(%r%h%)%2* " . StatusLine_GetBufferFlags() . StatusLine_GetBasicFileInfo() . " " . StatusLine_GetModifiedTime() . " %Ll" . StatusLine_GetFileSize() . "%=|%b,0x%B|  %l,%c%V  %P "
	 return statusLine
endfunction


"" Here goes the mighty status line...
set laststatus=2
set statusline=%!GetStatusLine()

"" Vundle setup
set rtp+=~/.vim/bundle/vundle/
 call vundle#rc()

 " let Vundle manage Vundle
 " required! 
 Bundle 'gmarik/vundle'

filetype plugin indent on

